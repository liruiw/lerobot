# @package _global_

# inherited from act.yaml
seed: 1000
dataset_repo_id: lerobot/pusht_keypoints


training:
  offline_steps: 100000
  online_steps: 0
  eval_freq: 20000
  save_freq: 20000
  save_checkpoint: true

  batch_size: 8
  lr: 1e-5
  lr_backbone: 1e-5
  weight_decay: 1e-4
  grad_clip_norm: 10
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.environment_state: "[i / ${fps} for i in range(1 - ${policy.action_horizon}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.action_horizon}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.action_horizon}, 1)]"

eval:
  n_episodes: 50
  batch_size: 50

# See `configuration_act.py` for more details.
policy:
  name: hpt
  domain_name: "pusht_keypoints"
  vision_backbone: "resnet18"
  pretrained_backbone_weights: "ResNet18_Weights.IMAGENET1K_V1"

  # Input / output structure.
  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.environment_state: [16]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.environment_state: min_max
    observation.state: min_max
  output_normalization_modes:
    action: min_max

  # HPT trunk config
  embed_dim: 256 # transformer model size
  num_blocks: 16 # number of blocks in the trunk transformer
  num_heads: 8 # number of heads in the trunk transformer
  use_modality_embedding: True # whether to add modality-specific trainable parameters
  use_domain_embedding: False # whether to add domain-specific trainable parameters
  token_postprocessing: "mean" # maxpool or meanpool the tokens
  weight_init_style: 'pytorch' # weight init
  drop_path: 0.0 # drop path in the trunk transformer
  use_gpt_trunk: False # load pre-trained trunk from GPT2
  use_llama_trunk: False # load pre-trained trunk from LLaMA2
  hf_trunk: "" # load pre-trained transformer from huggingface
  no_trunk: False # no trunk
  load_pretrained: False # load pre-trained model

  # stem network (projectors) for different modalities
  modalities: ['state'] # 'language'
  modality_embed_dim: "${policy.embed_dim}"
  normalize_state: True # normalize state vectors
  state_embedding_dim: 1 # dimension of positional encoding for state
  image_encoder: resnet # default to be resnet
  crossattn_dim_head: 64 # for cross attention modules
  crossattn_heads: 8 # number of heads in cross attention
  crossattn_modality_dropout: 0.1 # the dropout ratio for cross attention
  observation_horizon: 2 # observation horizon
  random_horizon_masking: True # whether to randomize observation input length
  add_pos_embedding_to_state: False # positional embedding for the state

  state_crossattn_latent: 16
  state_input_dim: 18 # ovewrite based on the dataset
  state_output_dim: "${policy.embed_dim}"
  state_widths: [128]
  state_num_of_copy: 1

  # head
  action_horizon: 4
  head_input_dim: "${policy.embed_dim}"
  head_tanh_end: True # normalized action output
  head_action_dim: "${env.action_dim}" # overwrite based on dataset
  head_dropout: True  # add dropout to the head
  head_widths: [256, 128]
